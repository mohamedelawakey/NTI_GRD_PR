# -*- coding: utf-8 -*-
"""NLp_PR_COMP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IXquaclp0my2H6CMMMrrvBXWVnZApiVU

# **Librarys**
"""

import pandas as pd
import re
import string
import pickle
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

"""# **Text Cleaning**"""

AR_STOPWORDS = set([
    'في', 'من', 'على', 'عن', 'إلى', 'كما', 'هذا', 'هذه', 'هناك',
    'هو', 'هي', 'هم', 'نحن', 'أيضاً', 'حتى', 'مع', 'كل', 'أكثر', 'أقل',
    'لقد', 'ولا', 'منه', 'فيه', 'بين', 'بعد', 'عند', 'بدون', 'أحد', 'أي'
])

def clean_arabic_text(text):
    text = str(text).lower()
    text = re.sub(r'^\s*\d+\s*\.*\s*', '', text)
    text = re.sub(r'\d+', '', text)
    text = re.sub(rf"[{re.escape(string.punctuation)}]", ' ', text)
    text = re.sub(r'\s+', ' ', text).strip()
    words = text.split()
    words = [w for w in words if w not in AR_STOPWORDS and len(w) > 1]
    return ' '.join(words)

"""# **Reading Data & Preparation**"""

data = pd.read_csv('Data Sets/Symptoms.csv')
data

"""# **Data Spliting**"""

X = data['symptoms_text']
y = data['specialty']

counts = y.value_counts()
data = data[data['specialty'].isin(counts[counts >= 2].index)]

X = data['symptoms_text']
y = data['specialty']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train = X_train.apply(clean_arabic_text)
X_test = X_test.apply(clean_arabic_text)

"""# **MODEL PIPELINE**"""

vectorizer = TfidfVectorizer(ngram_range=(1, 2))
X_train_vec = vectorizer.fit_transform(X_train)


model = LogisticRegression()
model.fit(X_train_vec, y_train)

X_test_vec = vectorizer.transform(X_test)
y_pred = model.predict(X_test_vec)

print(classification_report(y_test, y_pred))

with open("Models/arabic_symptom_model.pkl", "wb") as f:
    pickle.dump(model, f)

with open("Models/vectorizer.pkl", "wb") as f:
    pickle.dump(vectorizer, f)

